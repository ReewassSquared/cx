package main

import "cxtweeter"
import "cxtweet"
import "cxtweetapi"

func extractThing(sl []ui8) (out []ui8) {
    for i := 1; i < len(sl); i++ {
        out = append(out, sl[i])
    }
}

func main()() {
    var TWEETCODE_ISSHA ui8 = 0UB
	var TWEETCODE_ISWAL ui8 = 1UB
	var TWEETCODE_ISSTR ui8 = 2UB
	var TWEETCODE_ISTWT ui8 = 3UB
	var TWEETCODE_ISLIK ui8 = 4UB
	var TWEETCODE_ISRTT ui8 = 5UB
    var TWEETCODE_ISALL ui8 = 6UB

    cxtweeter.initdb()

    var success bool
    success = cxtweet.launch()
    if !success {
        printf("abort - chain couldn't even launch\n")
        return
    }
    printf("[CXTWEET] launched blockchain.\n")
    /* get length */
    var lentidx i32 = 0
    var lent    i32
    var lentser []ui8
    var synclen i32
    var lentstr str
    lentstr = "meta"
    lentser = cxtweet.strfetch(cxtweeter.dbmeta, "meta")
    if len(lentser) > 0 {
        lent = cxtweeter.deserializeI32(lentser, &lentidx)
        printf("[CXTWEET] length retrieved from meta database.\n")
    } else {
        lent = 1
        printf("[CXTWEET] starting new length.\n")
    }
    synclen = cxtweet.chainlen()
    printf("[CXTWEET] got chain length from API: %d\n", synclen)
    //printf("what\n")
    if synclen == -1 {
        printf("abort - chain length invalid!\n")
        return
    }
    /* make account */
    var mksucc bool
    //printf("what\n")
    mksucc = cxtweet.mkaccount()
    if !mksucc {
        printf("abort - account failure\n")
        return
    }
    printf("[CXTWEET] account created. Grabbing blocks.\n")
    /* now we grab all the blocks in the world */
    var block []ui8
    //printf("what\n")
    for i := lent; i <= synclen; i++ {
	    if i < 1 {
		    printf("[CXTWEET] SKIPPING BLOCK %d.\n", i)
	    } else {
        	block = cxtweet.getblock(i)
        	cxtweetapi.ProcessIncoming(i, block)
        	printf("[CXTWEET] block %d processed successfully.\n", i)
	    }
    }
    lent = synclen
    /* launch the api */
    var ok bool
    //printf("what\n")
    ok = cxtweet.launchapi()
    //printf("what\n")
    if !ok {
        printf("api launch failed!")
        return
    }
    printf("[CXTWEET] API successfully launched.\n")
    /* everything should be processed, so it's time to do the loop */
    //var incoming []ui8
    var outgoing []ui8
    var instrtmp []ui8
    var incomstr str
    var incomsha [32]ui8
    var incomwal [25]ui8
    var nlent i32
    var u i32
    for u = 0; u < 100000000; u++ {
        var incoming []ui8
        printf("[%d] [CXTWEET] begin new.\n", u)
        incoming = cxtweet.stall()
        printf("[CXTWEET] request received.\n")
        /* request received. first byte tells us where to send it */
        if incoming[0] == TWEETCODE_ISSTR {
            /* there's only one request per each tweetcode. */
            instrtmp = extractThing(incoming)
            //for i := 1; i < len(incoming); i++ {
            //    printf("%d ", incoming[i])
            //}
            //printf("\n")
            //var magicstr str
            //magicstr = cxtweet.bytes2str(incoming)
            //printf("something: %s\n", magicstr)
            incomstr = cxtweet.bytes2str(instrtmp)
            //printf("[CXTWEET] query hashtag: %s\n", incomstr)
            outgoing = cxtweetapi.GetFullHashtagByTag(incomstr)
        } else if incoming[0] == TWEETCODE_ISWAL {
            for i := 1; i < 26; i++ {
                incomwal[i - 1] = incoming[i]
            }
            outgoing = cxtweetapi.GetFullAccountByID(incomwal)
        } else if incoming[0] == TWEETCODE_ISSHA {
            for i := 1; i < 33; i++ {
                incomsha[i - 1] = incoming[i]
            }
            outgoing = cxtweetapi.GetFullTweetByHash(incomsha)
        } else if incoming[0] == TWEETCODE_ISTWT {
            instrtmp = extractThing(incoming)
            outgoing = cxtweetapi.PostTweet(instrtmp)
        } else if incoming[0] == TWEETCODE_ISLIK {
            for i := 1; i < 33; i++ {
                incomsha[i - 1] = incoming[i]
            }
            outgoing = cxtweetapi.PostLike(incomsha)
        } else if incoming[0] == TWEETCODE_ISRTT {
            for i := 1; i < 33; i++ {
                incomsha[i - 1] = incoming[i]
            }
            outgoing = cxtweetapi.PostRetweet(incomsha)
        } else if incoming[0] == TWEETCODE_ISALL {
            outgoing = cxtweetapi.GetAllTweets()    
        } else {
            printf("abort - unknown tweet code!\n")
            return
        }
        nlent = cxtweet.chainlen()
        if nlent > lent {
            printf("[CXTWEET] new block(s) received (new length: %d), (old: %d)\n", nlent, lent)
            lent = lent + 1
            for i := lent; i <= nlent; i++ {
                block = cxtweet.getblock(i)
                cxtweetapi.ProcessIncoming(i, block)
                printf("[CXTWEET] block %d processed successfully.\n", i)
            }
        }
        lent = nlent
        var nlentser [4]ui8
        nlentser = cxtweeter.serializeI32(lent)
        var nlenser []ui8
        for y := 0; y < 4; y++ {
            nlenser = append(nlenser, nlentser[y])
        }
        var nlentserok bool
        nlentserok = cxtweet.strstore(cxtweeter.dbmeta, "meta", nlenser)
        if nlentserok {
            printf("[CXTWEET] meta database successfully updated.\n")
        } else {
            printf("[CXTWEET] meta database error: cannot write!\n")
        }
        cxtweet.expose(outgoing)
        printf("[CXTWEET] cycle has been completed.\n")
    }
}
