//code generated by CXDatum. DO NOT EDIT.


package main

import "model"
import "cxdatum"

func extractThing(sl []ui8) (out []ui8) {
    for i := 1; i < len(sl); i++ {
        out = append(out, sl[i])
    }
}

func main()() {
    model.initdb()

    /* the following is generated by CXDatum. */

    var success bool
    success = cxdatum.launch()
    if !success {
        printf("abort - chain couldn't even launch\n")
        return
    }
    printf("[CXDATUM] launched blockchain.\n")
    /* get length */
    var lentidx i32 = 0
    var lent    i32
    var lentser []ui8
    var synclen i32
    var lentstr str
    lentstr = "meta"
    var yghs []ui8
    yghs = cxdatum.str2bytes("meta")
    lentser = cxdatum.fetch(model.dbmeta, yghs)
    if len(lentser) > 0 {
        lent = model.deserializeI32(lentser, &lentidx)
        printf("[CXDATUM] length retrieved from meta database.\n")
    } else {
        lent = 1
        printf("[CXDATUM] starting new length.\n")
    }
    synclen = cxdatum.chainlen()
    printf("[CXDATUM] got chain length from API: %d\n", synclen)
    if synclen == -1 {
        printf("abort - chain length invalid!\n")
        return
    }
    /* make account */
    var mksucc bool
    mksucc = cxdatum.mkaccount()
    if !mksucc {
        printf("abort - account failure\n")
        return
    }
    printf("[CXDATUM] account created. Grabbing blocks.\n")
	/* now we grab all the blocks in the world */
	lent = lent + 1
    for i := lent; i <= synclen; i++ {
	    if i < 1 {
		    printf("[CXDATUM] SKIPPING BLOCK %d.\n", i)
	    } else {
			var block []ui8
        	block = cxdatum.getblock(i)
        	model.ProcessIncoming(block)
        	printf("[CXDATUM] block %d processed successfully.\n", i)
	    }
    }
    lent = synclen
    /* launch the api */
    var ok bool
    ok = cxdatum.launchapi()
    if !ok {
        printf("api launch failed!")
        return
    }
	printf("[CXDATUM] API successfully launched.\n")
	var nlent i32
    /* everything should be processed, so it's time to do the loop */
	var CXDATUM_EGRESS_CODE_getStrat ui8 = 0UB
	var CXDATUM_EGRESS_CODE_getAccount ui8 = 1UB
	var CXDATUM_EGRESS_CODE_makeStrat ui8 = 2UB
	var CXDATUM_EGRESS_CODE_makeRestrat ui8 = 3UB
	var CXDATUM_EGRESS_CODE_makeFollow ui8 = 4UB
	var CXDATUM_EGRESS_CODE_getWallet ui8 = 5UB
	var CXDATUM_EGRESS_CODE_getName ui8 = 6UB
	var CXDATUM_EGRESS_CODE_getHashtag ui8 = 7UB
	var CXDATUM_EGRESS_CODE_makeBio ui8 = 8UB
	var CXDATUM_EGRESS_CODE_makePfp ui8 = 9UB
	var CXDATUM_EGRESS_CODE_makeReply ui8 = 10UB
	var CXDATUM_EGRESS_CODE_getReplies ui8 = 11UB
	var CXDATUM_EGRESS_CODE_getLikedBy ui8 = 12UB
	var CXDATUM_EGRESS_CODE_getAllStrats ui8 = 13UB
	var CXDATUM_EGRESS_CODE_makeName ui8 = 14UB
	var CXDATUM_EGRESS_CODE_getRestratBy ui8 = 15UB
	var CXDATUM_EGRESS_CODE_makeLike ui8 = 16UB
	for i := 0; i < 1000000000; i++ {
		var outgoing []ui8
		var incoming []ui8
		incoming = cxdatum.stall()
		var _cxdatum_tmp_700 []ui8
		_cxdatum_tmp_700 = extractThing(incoming)
		var idx ui8 = incoming[0]
		if idx == CXDATUM_EGRESS_CODE_getStrat {
			var _cxdatum_tmp_701 model.getStrat_arg_EgressExpect
			_cxdatum_tmp_701 = model.deserializegetStrat_arg_EgressExpect(_cxdatum_tmp_700)
			var _cxdatum_tmp_702 [32]ui8
			_cxdatum_tmp_702 = _cxdatum_tmp_701.txid
			outgoing = model.getStrat(_cxdatum_tmp_702)
		} else if idx == CXDATUM_EGRESS_CODE_getAccount {
			var _cxdatum_tmp_706 model.getAccount_arg_EgressExpect
			_cxdatum_tmp_706 = model.deserializegetAccount_arg_EgressExpect(_cxdatum_tmp_700)
			var _cxdatum_tmp_707 [25]ui8
			_cxdatum_tmp_707 = _cxdatum_tmp_706.owner
			outgoing = model.getAccount(_cxdatum_tmp_707)
		} else if idx == CXDATUM_EGRESS_CODE_makeStrat {
			var _cxdatum_tmp_711 model.makeStrat_arg_EgressExpect
			_cxdatum_tmp_711 = model.deserializemakeStrat_arg_EgressExpect(_cxdatum_tmp_700)
			var _cxdatum_tmp_712 str
			_cxdatum_tmp_712 = _cxdatum_tmp_711.strat
			outgoing = model.makeStrat(_cxdatum_tmp_712)
		} else if idx == CXDATUM_EGRESS_CODE_makeRestrat {
			var _cxdatum_tmp_716 model.makeRestrat_arg_EgressExpect
			_cxdatum_tmp_716 = model.deserializemakeRestrat_arg_EgressExpect(_cxdatum_tmp_700)
			var _cxdatum_tmp_717 [32]ui8
			_cxdatum_tmp_717 = _cxdatum_tmp_716.restrat
			outgoing = model.makeRestrat(_cxdatum_tmp_717)
		} else if idx == CXDATUM_EGRESS_CODE_makeFollow {
			var _cxdatum_tmp_721 model.makeFollow_arg_EgressExpect
			_cxdatum_tmp_721 = model.deserializemakeFollow_arg_EgressExpect(_cxdatum_tmp_700)
			var _cxdatum_tmp_722 str
			_cxdatum_tmp_722 = _cxdatum_tmp_721.owner
			outgoing = model.makeFollow(_cxdatum_tmp_722)
		} else if idx == CXDATUM_EGRESS_CODE_getWallet {
			var _cxdatum_tmp_726 model.getWallet_arg_EgressExpect
			_cxdatum_tmp_726 = model.deserializegetWallet_arg_EgressExpect(_cxdatum_tmp_700)
			var _cxdatum_tmp_727 str
			_cxdatum_tmp_727 = _cxdatum_tmp_726.nname
			outgoing = model.getWallet(_cxdatum_tmp_727)
		} else if idx == CXDATUM_EGRESS_CODE_getName {
			var _cxdatum_tmp_731 model.getName_arg_EgressExpect
			_cxdatum_tmp_731 = model.deserializegetName_arg_EgressExpect(_cxdatum_tmp_700)
			var _cxdatum_tmp_732 [25]ui8
			_cxdatum_tmp_732 = _cxdatum_tmp_731.owner
			outgoing = model.getName(_cxdatum_tmp_732)
		} else if idx == CXDATUM_EGRESS_CODE_getHashtag {
			var _cxdatum_tmp_736 model.getHashtag_arg_EgressExpect
			_cxdatum_tmp_736 = model.deserializegetHashtag_arg_EgressExpect(_cxdatum_tmp_700)
			var _cxdatum_tmp_737 str
			_cxdatum_tmp_737 = _cxdatum_tmp_736.tag
			outgoing = model.getHashtag(_cxdatum_tmp_737)
		} else if idx == CXDATUM_EGRESS_CODE_makeBio {
			var _cxdatum_tmp_741 model.makeBio_arg_EgressExpect
			_cxdatum_tmp_741 = model.deserializemakeBio_arg_EgressExpect(_cxdatum_tmp_700)
			var _cxdatum_tmp_742 str
			_cxdatum_tmp_742 = _cxdatum_tmp_741.bio
			outgoing = model.makeBio(_cxdatum_tmp_742)
		} else if idx == CXDATUM_EGRESS_CODE_makePfp {
			var _cxdatum_tmp_746 model.makePfp_arg_EgressExpect
			_cxdatum_tmp_746 = model.deserializemakePfp_arg_EgressExpect(_cxdatum_tmp_700)
			var _cxdatum_tmp_747 str
			_cxdatum_tmp_747 = _cxdatum_tmp_746.pfp
			outgoing = model.makePfp(_cxdatum_tmp_747)
		} else if idx == CXDATUM_EGRESS_CODE_makeReply {
			var _cxdatum_tmp_751 model.makeReply_arg_EgressExpect
			_cxdatum_tmp_751 = model.deserializemakeReply_arg_EgressExpect(_cxdatum_tmp_700)
			var _cxdatum_tmp_752 [32]ui8
			_cxdatum_tmp_752 = _cxdatum_tmp_751.reply
			var _cxdatum_tmp_753 str
			_cxdatum_tmp_753 = _cxdatum_tmp_751.strat
			outgoing = model.makeReply(_cxdatum_tmp_752, _cxdatum_tmp_753)
		} else if idx == CXDATUM_EGRESS_CODE_getReplies {
			var _cxdatum_tmp_757 model.getReplies_arg_EgressExpect
			_cxdatum_tmp_757 = model.deserializegetReplies_arg_EgressExpect(_cxdatum_tmp_700)
			var _cxdatum_tmp_758 [32]ui8
			_cxdatum_tmp_758 = _cxdatum_tmp_757.txid
			outgoing = model.getReplies(_cxdatum_tmp_758)
		} else if idx == CXDATUM_EGRESS_CODE_getLikedBy {
			var _cxdatum_tmp_762 model.getLikedBy_arg_EgressExpect
			_cxdatum_tmp_762 = model.deserializegetLikedBy_arg_EgressExpect(_cxdatum_tmp_700)
			var _cxdatum_tmp_763 [32]ui8
			_cxdatum_tmp_763 = _cxdatum_tmp_762.txid
			outgoing = model.getLikedBy(_cxdatum_tmp_763)
		} else if idx == CXDATUM_EGRESS_CODE_getAllStrats {
			var _cxdatum_tmp_767 model.getAllStrats_arg_EgressExpect
			_cxdatum_tmp_767 = model.deserializegetAllStrats_arg_EgressExpect(_cxdatum_tmp_700)
			outgoing = model.getAllStrats()
		} else if idx == CXDATUM_EGRESS_CODE_makeName {
			var _cxdatum_tmp_771 model.makeName_arg_EgressExpect
			_cxdatum_tmp_771 = model.deserializemakeName_arg_EgressExpect(_cxdatum_tmp_700)
			var _cxdatum_tmp_772 str
			_cxdatum_tmp_772 = _cxdatum_tmp_771.name
			outgoing = model.makeName(_cxdatum_tmp_772)
		} else if idx == CXDATUM_EGRESS_CODE_getRestratBy {
			var _cxdatum_tmp_776 model.getRestratBy_arg_EgressExpect
			_cxdatum_tmp_776 = model.deserializegetRestratBy_arg_EgressExpect(_cxdatum_tmp_700)
			var _cxdatum_tmp_777 [32]ui8
			_cxdatum_tmp_777 = _cxdatum_tmp_776.txid
			outgoing = model.getRestratBy(_cxdatum_tmp_777)
		} else if idx == CXDATUM_EGRESS_CODE_makeLike {
			var _cxdatum_tmp_781 model.makeLike_arg_EgressExpect
			_cxdatum_tmp_781 = model.deserializemakeLike_arg_EgressExpect(_cxdatum_tmp_700)
			var _cxdatum_tmp_782 [32]ui8
			_cxdatum_tmp_782 = _cxdatum_tmp_781.like
			outgoing = model.makeLike(_cxdatum_tmp_782)
		} else {
        printf("abort - unknown code!\n")
        return
    }
    nlent = cxdatum.chainlen()
    if nlent > lent {
        printf("[CXDATUM] new block(s) received (new length: %d), (old: %d)\n", nlent, lent)
        lent = lent + 1
        for i := lent; i <= nlent; i++ {
			var block []ui8
            block = cxdatum.getblock(i)
            model.ProcessIncoming(block)
            printf("[CXDATUM] block %d processed successfully.\n", i)
        }
    }
    lent = nlent
    var nlentser [4]ui8
    nlentser = model.serializeI32(lent)
    var nlenser []ui8
    for y := 0; y < 4; y++ {
        nlenser = append(nlenser, nlentser[y])
    }
    var nlentserok bool
    var tmpstr2 []ui8
    tmpstr2 = cxdatum.str2bytes("meta")
    nlentserok = cxdatum.store(model.dbmeta, tmpstr2, nlenser)
    if nlentserok {
        printf("[CXDATUM] meta database successfully updated.\n")
    } else {
        printf("[CXDATUM] meta database error: cannot write!\n")
    }
    cxdatum.expose(outgoing)
    printf("[CXDATUM] cycle has been completed.\n")
}
}


