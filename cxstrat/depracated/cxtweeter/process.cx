package cxtweeter

import "cxtweet"

var dbmeta     str
var metabucket str
var dbtweet    str
var dbaccount  str
var dbtag      str
var dblikes    str
var dbretweets str
var dbnames    str
var dbwallets  str
var hashcode   ui8
var tagcode    ui8
var ecodeopen  ui8
var ecodeclose ui8
var schklen i32


func initdb() {
    var ok bool
    dbtweet    = "dbtweet"
    dbaccount  = "dbaccount"
    dbtag      = "dbtag"
    dblikes    = "dblikes"
    dbretweets = "dbretweets"
    dbnames    = "dbnames"
    dbwallets  = "dbwallets"
    dbmeta     = "dbmeta"
    ok         = cxtweet.newbucket(dbtweet)
    ok         = cxtweet.newbucket(dbaccount)
    ok         = cxtweet.newbucket(dbtag)
    ok         = cxtweet.newbucket(dblikes)
    ok         = cxtweet.newbucket(dbretweets)
    ok         = cxtweet.newbucket(dbnames)
    ok         = cxtweet.newbucket(dbwallets)
    ok         = cxtweet.newbucket(dbmeta)
    ok         = cxtweet.newbucket("blockstat")
    schklen = 27

    hashcode   = 35UB
    tagcode    = 64UB
    ecodeopen  = 60UB
    ecodeclose = 62UB
}

/**
 * gotTweet() - processes a new transaction
 * off the blockchain into the CXDB.
 * First checks if transaction is part of the
 * tweet interface (not zero, essentially.)
 * Then delegates CXDB updates to other functions
 * as necessary.
 */
func gotTweet(index i32, txn []ui8) {
    /* before doing anything, check index to see if already present */
    var sblockstat []ui8
    var blockstat []i32
    sblockstat = cxtweet.strfetch("blockstat", "blockstat")
    if len(sblockstat) == 0 {
        blockstat = append(blockstat, index)
    } else {
        blockstat = deserializeBlockstat(sblockstat)
        for i := 0; i < len(blockstat); i++ {
            if index == blockstat[i] {
                printf("[GOTTWEET] block %d already present; skipping...\n", index)
                return
            }
        }
        blockstat = append(blockstat, index)
        sblockstat = serializeBlockstat(blockstat)
        var tok bool
        tok = cxtweet.strstore("blockstat", "blockstat", sblockstat)
        if !tok {
            printf("[GOTTWEET] error! blockstat db error.\n")
        }
    }
    var slik_ str
    var srtt_ str
    var sncg_ str
    var slikmaj []ui8
    var srttmaj []ui8
    var sncgmaj []ui8
    slik_ = "<|::[]CXTWEET_LIKELIK[]::|>"
    srtt_ = "<|::[]CXTWEET_RETWEET[]::|>"
    sncg_ = "<|::[]CXTWEET_NAMENAM[]::|>"
    slikmaj    = cxtweet.str2bytes(slik_)
    srttmaj    = cxtweet.str2bytes(srtt_)
    sncgmaj    = cxtweet.str2bytes(sncg_)

    schklen = len(slikmaj)
    var txid [32]ui8
    var owner [25]ui8
    var tweet [512]ui8
    for i := 0; i < 32; i++ {
        txid[i] = txn[i]
    }
    for i := 0; i < 25; i++ {
        owner[i] = txn[32 + i]
    }
    var tnil bool = true
    var trtt bool = true
    var tlik bool = true
    var tncg bool = true
    for i := 0; i < 512; i++ {
        tweet[i] = txn[57 + i]
        if tweet[i] > 0UB {
            tnil = false
        }
        if i < schklen {
            //printf("%d\n", i)
            if tweet[i] != slikmaj[i] {
                tlik = false
            }
            if tweet[i] != srttmaj[i] {
                trtt = false
            }
            if tweet[i] != sncgmaj[i] {
                tncg = false
            }
        }
    }
    //var txidstr str
    //var waltstr str
    //var twetstr str
    //txidstr = shaToHex(txid)
    //waltstr = cxtweet.rdaddress(owner)
    //twetstr = twtToString(tweet)
    //printf("%s\n%s\n%s\n\n", txidstr, waltstr, twetstr)

    /*printf("[")
    for i := 0; i < 32; i++ {
        printf("%d ", txid[i])
    }
    printf("]\n\n")*/
    if tnil {
        /* tweet is nil, so it's a standard txn, not part of cxtweet. */
        return
    }
    /*var ccccc str
    ccccc = cxtweet.rdaddress(owner)
    str.print(ccccc)
    printf("[")
    for i := 0; i < 25; i++ {
        printf("%d ", owner[i])
    }
    printf("]\n")*/
    
    if tlik {
        processLike(txid, owner, tweet)
    } else if trtt {
        processRetweet(txid, owner, tweet)
    } else {
        /* normal tweet */
        processTweet(txid, owner, tweet)
    }
}

/**
 *
 *
 *
 */
func processTweet(txid [32]ui8, owner [25]ui8, tweet [512]ui8) {
    var aowner Account
    var atweet Tweet
    //...
    /* walk tweet to get tags and hashs */
    var readbytes []ui8
    var ttags     []ui8
    var thashs    []str
    for i := 0; i < 511; i++ {
        //printf("%d ", tweet[i])
        //if i % 16 == 15 {
        //    printf("\n")
        //}
        if tweet[i] == tagcode {
            /* then the next thing BETTER be a tag. */
            readbytes = append(readbytes, tweet[i])
            i = i + 1
            var ttagcon []ui8
            for isBase58(tweet[i]) {
                ttagcon = append(ttagcon, tweet[i])
                readbytes = append(readbytes, tweet[i])
                i++
            }
            var tag [25]ui8
            tag = cxtweet.btaddress(ttagcon)
            ttags = walSliceAppend(ttags, tag)
        } else if tweet[i] == hashcode {
            /* then the next thing BETTER be a hashtag */
            readbytes = append(readbytes, tweet[i])
            i = i + 1
            var ttagstr []ui8
            for isTweetHashtag(tweet[i]) {
                ttagstr = append(ttagstr, tweet[i])
                readbytes = append(readbytes, tweet[i])
                i++
            }
            var hshstr str
            if len(ttagstr) > 0 {
                hshstr = cxtweet.bytes2str(ttagstr)
                thashs = append(thashs, hshstr)
            }
        }
        readbytes = append(readbytes, tweet[i])
    }
    var tmsg str
    tmsg = cxtweet.bytes2str(readbytes)
    
    /* next build the tweet */
    var twt Tweet
    
    twt = Tweet{owner: owner, obj: txid, txt: tmsg, likes: 0, retwt: 0, tags: ttags, hashs: thashs}

    /* next, we need to store the tweet to dbtweet */
    var ok bool
    var stwt []ui8
    stwt = serializeTweet(twt)
    ok = cxtweet.shastore(dbtweet, txid, stwt)
    /*printf("[")
    for i := 0; i < 32; i++ {
        printf("%d ", txid[i])
    }
    printf("]\n\n")*/

    /* update megatweet db */
    var segatweet []ui8
    var megatweet []ui8
    var megaidx i32 = 0
    segatweet = cxtweet.strfetch(dbtweet, "all")
    if len(segatweet) > 0 {
        printf("megatweet update:\n")
        megatweet = deserializeShaSlice(segatweet, &megaidx)
    }
    megatweet = shaSliceAppend(megatweet, txid)
    segatweet = serializeShaSlice(megatweet)
    var megaok bool
    megaok = cxtweet.strstore(dbtweet, "all", segatweet)


    /* next, we need to store the tweet hash into account. */
    /* or create the account if not exists. */
    var accnt []ui8
    var Accnt Account
    accnt = cxtweet.walfetch(dbaccount, owner)
    if len(accnt) == 0 {
        Accnt = createAccount(owner)
    } else {
        Accnt = deserializeAccount(accnt)
    }
    var atwts []ui8
    atwts = Accnt.tweets
    atwts = shaSliceAppend(atwts, txid)
    Accnt.tweets = atwts
    accnt = serializeAccount(Accnt)
    ok = cxtweet.walstore(dbaccount, owner, accnt)

    /* next, we need to update the tagged accounts. */
    var taglen i32
    taglen = len(ttags)
    taglen = taglen / 25
    for i := 0; i < taglen; i++ {
        var tagd [25]ui8
        var ttagd []ui8
        var laccnt []ui8
        tagd = walSliceIndex(ttags, i)
        laccnt = cxtweet.walfetch(dbaccount, tagd)
        if len(laccnt) > 0 {
            Accnt = deserializeAccount(laccnt)
            ttagd = Accnt.tags 
            ttagd  = shaSliceAppend(ttagd, txid)
            Accnt.tags = ttagd
            laccnt = serializeAccount(Accnt)
            ok = cxtweet.walstore(dbaccount, tagd, laccnt)
        }
    }

    /* finally, we need to update the Hashtags. */
    var hashd str
    var hasht []ui8
    var Hasht Hashtag
    for i := 0; i < len(thashs); i++ {
        var ttagd []ui8
        //str.print(thashs[i])
        hashd = thashs[i]
        hasht = cxtweet.strfetch(dbtag, hashd)
        if len(hasht) == 0 {
            Hasht = createHashtag(hashd)
        } else {
            Hasht = deserializeHashtag(hasht)
        }
        ttagd = Hasht.tweets
        ttagd = shaSliceAppend(ttagd, txid)
        Hasht.tweets = ttagd
        hasht = serializeHashtag(Hasht)
        ok = cxtweet.strstore(dbtag, hashd, hasht)
    }
}

/**
 * processLike() - processes a block object
 * which contains a serialized like of a post.
 * This function appropriately updates the backend
 * database.
 * Actions:
 * 1. fetches the owner's account and updates likes.
 * 2. fetches the liked tweet.
 * 3. Updates liked tweet's likes.
 * 4. Fetches all hashtags the tweet is associated with.
 * 5. For each hashtag, update tlikes.
 * 6. Store updated account, tweet, and hashtags.
 */
func processLike(txid [32]ui8, owner [25]ui8, tweet [512]ui8) {
    var aowner Account
    var atweet Tweet
    var ahasht Hashtag
    var sowner []ui8
    var stweet []ui8
    var shasht []ui8
    var ok bool

    /* walk through the tweet to get the magic thing */
    /* easier to overwrite txid than make new variable */
    var tpcode ui8
    var indx i32 
    indx = schklen
    /*var fknwrk []ui8
    for i := 27; i < 91; i++ {
        //printf("%d ", tweet[i])
        fknwrk = append(fknwrk, tweet[i])
    }
    //var fstrnn str
    //fstrnn = cxtweet.bytes2str(fknwrk)
    //printf("\n%s", fstrnn)
    //printf("\n")*/
    for i := 0; i < 32; i++ {
        tpcode = toHexDigit(tweet[indx])
        //printf("%d", tpcode)
        indx = indx + 1
        tpcode = tpcode * 16UB
        tpcode = tpcode + toHexDigit(tweet[indx])
        indx = indx + 1
        txid[i] = tpcode
    }
    /*printf("\n")
    for i := 0; i < 32; i++ {
        printf("%d ", txid[i])
    }
    printf("\n")*/

    /* before taking action, check if tweet to like exists */
    var chk []ui8
    chk = cxtweet.shafetch(dbtweet, txid)
    if len(chk) == 0 {
        return
    }

    sowner = cxtweet.walfetch(dbaccount, owner)
    if len(sowner) == 0 {
        /* we need to create a new Account object */
        aowner = createAccount(owner)
    } else {
        aowner = deserializeAccount(sowner)
    }
    var ashac []ui8
    ashac = aowner.likes
    ashac = shaSliceAppend(ashac, txid)
    aowner.likes = ashac
    sowner = serializeAccount(aowner)
    ok = cxtweet.walstore(dbaccount, owner, sowner)

    /* next, update dblikes */
    sowner = cxtweet.shafetch(dblikes, txid)
    var awalc []ui8
    if len(sowner) > 0 {
        var idx i32
        awalc = deserializeWalSlice(sowner, &idx)
    }
    awalc = walSliceAppend(awalc, owner)
    sowner = serializeWalSlice(awalc)
    ok = cxtweet.shastore(dblikes, txid, sowner)

    /* next get liked tweet and update likes */
    stweet = cxtweet.shafetch(dbtweet, txid)
    atweet = deserializeTweet(stweet)
    //var txidstr str
    //var waltstr str
    //var twetstr str
    //txidstr = shaToHex(atweet.obj)
    //waltstr = cxtweet.rdaddress(atweet.owner)
    //twetstr = atweet.txt
    //var msl []str
    //msl = atweet.hashs
    //printf("\n\n\n%s\n%s\n%s\n", txidstr, waltstr, twetstr)
    //for i := 0; i < len(atweet.hashs); i++ {
    //    //printf("\t\t\t%s:%d\n", msl[i], len(msl[i]))
    //}
    atweet.likes = i32.add(atweet.likes, 1)
    stweet = serializeTweet(atweet)
    ok = cxtweet.shastore(dbtweet, txid, stweet)

    /* finally, update each hashtag tlikes */
    var hashtags []str
    var hashtg str
    hashtags = atweet.hashs
    for i := 0; i < len(hashtags); i++ {
        hashtg = hashtags[i]
        shasht = cxtweet.strfetch(dbtag, hashtg)
        //printf("hashtg: %s\n", hashtg)

        ahasht = deserializeHashtag(shasht)
        ahasht.tlikes = ahasht.tlikes + 1
        shasht = serializeHashtag(ahasht)
        ok = cxtweet.strstore(dbtag, hashtg, shasht)
    }
}

/**
 * processRetweet() - processes a block object
 * which contains a serialized retweet of a post.
 * This function appropriately updates the backend
 * database.
 * Actions:
 * 1. fetches the owner's account and updates retweets.
 * 2. fetches the retweeted tweet.
 * 3. Updates retweeted tweet's retweets.
 * 4. Fetches all hashtags the retweet is associated with.
 * 5. For each hashtag, update trtwts.
 * 6. Store updated account, tweet, and hashtags.
 */
func processRetweet(txid [32]ui8, owner [25]ui8, tweet [512]ui8) {
    var aowner Account
    var atweet Tweet
    var ahasht Hashtag
    var sowner []ui8
    var stweet []ui8
    var shasht []ui8
    var ok bool

    /* walk through the tweet to get the magic thing */
    /* easier to overwrite txid than make new variable */
    var tpcode ui8
    var indx i32 
    indx = schklen
    /*var fknwrk []ui8
    for i := 27; i < 91; i++ {
        //printf("%d ", tweet[i])
        fknwrk = append(fknwrk, tweet[i])
    }
    //var fstrnn str
    //fstrnn = cxtweet.bytes2str(fknwrk)
    //printf("\n%s", fstrnn)
    //printf("\n")*/
    for i := 0; i < 32; i++ {
        tpcode = toHexDigit(tweet[indx])
        //printf("%d", tpcode)
        indx = indx + 1
        tpcode = tpcode * 16UB
        tpcode = tpcode + toHexDigit(tweet[indx])
        indx = indx + 1
        txid[i] = tpcode
    }

    /* before taking action, check if tweet to rtt exists */
    var chk []ui8
    chk = cxtweet.shafetch(dbtweet, txid)
    if len(chk) == 0 {
        return
    }

    sowner = cxtweet.walfetch(dbaccount, owner)
    if len(sowner) == 0 {
        /* we need to create a new Account object */
        aowner = createAccount(owner)
    } else {
        aowner = deserializeAccount(sowner)
    }
    var ashac []ui8
    ashac = aowner.retweets
    ashac = shaSliceAppend(ashac, txid)
    aowner.retweets = ashac
    sowner = serializeAccount(aowner)
    ok = cxtweet.walstore(dbaccount, owner, sowner)

    /* next, update dbretweets */
    sowner = cxtweet.shafetch(dbretweets, txid)
    var awalc []ui8
    if len(sowner) > 0 {
        var idx i32
        awalc = deserializeWalSlice(sowner, &idx)
    }
    awalc = walSliceAppend(awalc, owner)
    sowner = serializeWalSlice(awalc)
    ok = cxtweet.shastore(dbretweets, txid, sowner)

    /* next get liked tweet and update likes */
    stweet = cxtweet.shafetch(dbtweet, txid)
    atweet = deserializeTweet(stweet)
    atweet.retwt = i32.add(atweet.retwt, 1)
    stweet = serializeTweet(atweet)
    ok = cxtweet.shastore(dbtweet, txid, stweet)

    /* finally, update each hashtag trtwts */
    var hashtags []str
    var hashtg str
    hashtags = atweet.hashs
    for i := 0; i < len(hashtags); i++ {
        hashtg = hashtags[i]
        shasht = cxtweet.strfetch(dbtag, hashtg)
        ahasht = deserializeHashtag(shasht)
        ahasht.trtwts = i32.add(ahasht.trtwts, 1)
        shasht = serializeHashtag(ahasht)
        ok = cxtweet.strstore(dbtag, hashtg, shasht)
    }
}

func createAccount(wal [25]ui8) (out Account) {
    var name_ str
    var tweets_ []ui8
    var likes_ []ui8
    var retweets_ []ui8
    var tags_ []ui8

    name_ = cxtweet.rdaddress(wal)
    //printf("createAccount: wallet: %s\n", name_)

    out = Account{name: name_, id: wal, tweets: tweets_, likes: likes_, retweets: retweets_, tags: tags_}

    var ok bool
    var nb []ui8
    nb = cxtweet.str2bytes(name_)
    ok = cxtweet.walstore(dbnames, wal, nb)
    nb = serializeWal(wal)
    ok = cxtweet.strstore(dbnames, name_, nb)
}

func createHashtag(name str) (out Hashtag) {
    var tweets_ []ui8

    out = Hashtag{name: name, tlikes: 0, trtwts: 0, tweets: tweets_}
}

func isBase58(code ui8) (out bool) {
    out = false
    var magicstr []ui8
    magicstr = cxtweet.str2bytes("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz")
    for i := 0; i < len(magicstr); i++ {
        if code == magicstr[i] {
            out = true
            return
        }
    }
}

func isTweetHashtag(code ui8) (out bool) {
    out = false
    var magicstr []ui8
    magicstr = cxtweet.str2bytes("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_")
    for i := 0; i < len(magicstr); i++ {
        if code == magicstr[i] {
            out = true
            return
        }
    }
}

func toHexDigit(code ui8) (out ui8) {
    if code < 64UB {
        out = code - 48UB
    } else {
        out = code - 87UB
    }
}

func shaToHex(sha [32]ui8) (out str) {
    var arr []ui8
    var idx i32
    var intmp ui8
    for i := 0; i < 32; i++ {
        intmp = sha[i]
        intmp = intmp / 16UB
        intmp = intmp + 48UB
        if intmp >= 58UB {
            intmp = intmp + 39UB
        }
        arr = append(arr, intmp)

        intmp = sha[i]
        intmp = intmp % 16UB
        intmp = intmp + 48UB
        if intmp >= 58UB {
            intmp = intmp + 39UB
        }
        arr = append(arr, intmp)
    }

    out = cxtweet.bytes2str(arr)
}

func twtToString(twt [512]ui8) (out str) {
    var arr []ui8
    for i := 0; i < 512; i++ {
        if twt[i] == 0UB {
            out = cxtweet.bytes2str(arr)
            return
        }
        arr = append(arr, twt[i])
    }
    out = "INVALID_ERR"
}

func stringToSha(s str) (out [32]ui8) {
    var tpcode ui8
    var indx i32 
    var tweet []ui8
    tweet = cxdatum.str2bytes(s)
    if len(tweet) != 64 {
        out = cxdatum.sumsha256(tweet)
        return
    }
    for i := 0; i < 32; i++ {
        tpcode = toHexDigit(tweet[indx])
        //printf("%d", tpcode)
        indx = indx + 1
        tpcode = tpcode * 16UB
        tpcode = tpcode + toHexDigit(tweet[indx])
        indx = indx + 1
        txid[i] = tpcode
    }
}